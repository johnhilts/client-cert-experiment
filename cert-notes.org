#+begin_src lisp
  ;; from hunchentoot
  (defmethod initialize-connection-stream ((acceptor ssl-acceptor) stream)
    ;; attach SSL to the stream if necessary
    (call-next-method
     acceptor
     (cl+ssl:make-ssl-server-stream
      stream
      :certificate (acceptor-ssl-certificate-file acceptor)
      :key (acceptor-ssl-privatekey-file acceptor)
      :password (acceptor-ssl-privatekey-password acceptor))))

  ;; compare with test client cert example
  (bt:make-thread
   (lambda ()
     (trivial-sockets:with-server (server (:port port))
       (let* ((socket (trivial-sockets:accept-connection server
                                                         :element-type '(unsigned-byte 8)))
              (ctx (cl+ssl:make-context :verify-mode cl+ssl:+ssl-verify-peer+
                                        :verify-location client-certificates-directory)))
         (cl+ssl:with-global-context (ctx :auto-free-p t)
         
           (let* ((client-stream (cl+ssl:make-ssl-server-stream
                                  socket
                                  :external-format nil
                                  :certificate     certificate
                                  :key             key))
                  (client-certificate      (cl+ssl:ssl-stream-x509-certificate client-stream))
                  (client-cert-fingerprint (cl+ssl:certificate-fingerprint client-certificate
                                                                           :sha256)))
             (let ((data (make-list 2)))
               (read-sequence data client-stream)
               (format t
                       "Server got from client (identified by ~s): ~s~%"
                       (hash-array->string client-cert-fingerprint)
                       (coerce (mapcar #'code-char data)
                               'string))
               (cl+ssl:x509-free client-certificate)
               (close socket)))
           )))))
#+end_src
